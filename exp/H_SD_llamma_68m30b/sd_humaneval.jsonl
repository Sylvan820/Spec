{"task_id": "HumanEval/0", "time": 129.41663026809692, "new_tokens": 1024, "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "time": 116.70111751556396, "new_tokens": 1028, "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n    ret = []\n    paren_string = paren_string.replace(' ', '')\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            ret.append('')\n        elif char == ')':\n            # if stack is empty, ignore\n            if not stack:\n                continue\n            # if we're at the last level of the stack, add a new ret element and append the char\n            if len(stack) == 1:\n                ret.append(char)\n                stack.pop()\n            # if stack contains a '(' character\n            elif len(stack) > 1 and stack[-2] == '(':\n                # pop '(' and ')' and append the new char\n                stack.pop()\n                stack.pop()\n                ret[-1] += char\n            else:\n                stack.pop()\n                stack[-1] += char\n\n    return ret"}
{"task_id": "HumanEval/2", "time": 120.22775840759277, "new_tokens": 1024, "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return round(number, 2)"}
{"task_id": "HumanEval/3", "time": 119.11420512199402, "new_tokens": 1024, "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    current_balance = 0\n    for deposit in operations:\n        current_balance += deposit\n    for withdrawal in operations:\n        current_balance -= withdrawal\n\n    return current_balance < 0"}
{"task_id": "HumanEval/4", "time": 100.83892631530762, "new_tokens": 1025, "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    numbers_sum = sum(numbers)\n    numbers_count = len(numbers)\n    if numbers_count > 0:\n        numbers_mean = numbers_sum / numbers_count\n        deviations = [abs(n - numbers_mean) for n in numbers]\n        return sum(deviations) / numbers_count\n    else:\n        return 0"}
